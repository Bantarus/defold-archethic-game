
ö?
Î?



















local const = require("druid.const")
local class = require("druid.system.middleclass")
local helper = require("druid.helper")

local BaseComponent = class("druid.component")

local INTERESTS = {} 
local IS_AUTO_TEMPLATE = not (sys.get_config("druid.no_auto_template") == "1")


BaseComponent.ON_INPUT = const.ON_INPUT
BaseComponent.ON_UPDATE = const.ON_UPDATE
BaseComponent.ON_MESSAGE = const.ON_MESSAGE
BaseComponent.ON_LATE_INIT = const.ON_LATE_INIT
BaseComponent.ON_FOCUS_LOST = const.ON_FOCUS_LOST
BaseComponent.ON_FOCUS_GAINED = const.ON_FOCUS_GAINED
BaseComponent.ON_LAYOUT_CHANGE = const.ON_LAYOUT_CHANGE
BaseComponent.ON_MESSAGE_INPUT = const.ON_MESSAGE_INPUT
BaseComponent.ON_WINDOW_RESIZED = const.ON_WINDOW_RESIZED
BaseComponent.ON_LANGUAGE_CHANGE = const.ON_LANGUAGE_CHANGE

BaseComponent.ALL_INTERESTS = {
	BaseComponent.ON_INPUT,
	BaseComponent.ON_UPDATE,
	BaseComponent.ON_MESSAGE,
	BaseComponent.ON_LATE_INIT,
	BaseComponent.ON_FOCUS_LOST,
	BaseComponent.ON_FOCUS_GAINED,
	BaseComponent.ON_LAYOUT_CHANGE,
	BaseComponent.ON_MESSAGE_INPUT,
	BaseComponent.ON_WINDOW_RESIZED,
	BaseComponent.ON_LANGUAGE_CHANGE,
}


BaseComponent.SPECIFIC_UI_MESSAGES = {
	[hash("layout_changed")] = BaseComponent.ON_LAYOUT_CHANGE, 
	[hash(BaseComponent.ON_FOCUS_LOST)] = BaseComponent.ON_FOCUS_LOST,
	[hash(BaseComponent.ON_FOCUS_GAINED)] = BaseComponent.ON_FOCUS_GAINED,
	[hash(BaseComponent.ON_WINDOW_RESIZED)] = BaseComponent.ON_WINDOW_RESIZED,
	[hash(BaseComponent.ON_MESSAGE_INPUT)] = BaseComponent.ON_MESSAGE_INPUT,
	[hash(BaseComponent.ON_LANGUAGE_CHANGE)] = BaseComponent.ON_LANGUAGE_CHANGE,
}


local uid = 0
function BaseComponent.create_uid()
	uid = uid + 1
	return uid
end










function BaseComponent.set_style(self, druid_style)
	self._meta.style = druid_style or {}
	local component_style = self._meta.style[self._component.name] or {}

	if self.on_style_change then
		self:on_style_change(component_style)
	end

	return self
end










function BaseComponent.set_template(self, template)
	template = template or ""

	local parent = self:get_parent_component()
	if parent and IS_AUTO_TEMPLATE then
		local parent_template = parent:get_template()
		if #parent_template > 0 then
			if #template > 0 then
				template = "/" .. template
			end
			template = parent_template .. template
		end
	end

	self._meta.template = template
	return self
end






function BaseComponent.get_template(self)
	return self._meta.template
end












function BaseComponent.set_nodes(self, nodes)
	self._meta.nodes = nodes

	
	
	
	if nodes then
		for id, node in pairs(nodes) do
			gui.set_id(node, id)
		end
	end

	return self
end








function BaseComponent.get_context(self)
	return self._meta.context
end






function BaseComponent.increase_input_priority(self)
	helper.deprecated("The component:increase_input_priority is deprecated. Please use component:set_input_priority(druid_const.PRIORITY_INPUT_MAX) instead")
end












function BaseComponent.get_node(self, node_or_name)
	if type(node_or_name) ~= "string" then
		
		return node_or_name
	end

	local template_name = self:get_template()
	local nodes = self:__get_nodes()

	if #template_name > 0 then
		template_name = template_name .. "/"
	end

	local node
	if nodes then
		node = nodes[template_name .. node_or_name]
	else
		node = gui.get_node(template_name .. node_or_name)
	end

	if not node then
		assert(node, "No component with name: " .. (template_name or "") .. (node_or_name or ""))
	end

	return node
end






function BaseComponent.get_druid(self)
	local context = { _context = self }
	return setmetatable(context, { __index = self._meta.druid })
end






function BaseComponent.get_name(self)
	return self._component.name .. BaseComponent.create_uid()
end






function BaseComponent.get_parent_name(self)
	local parent = self:get_parent_component()
	return parent and parent:get_name()
end






function BaseComponent.get_input_priority(self)
	return self._component.input_priority
end










function BaseComponent.set_input_priority(self, value, is_temporary)
	assert(value)

	if self._component.input_priority == value then
		return self
	end

	self._component.input_priority = value
	self._component._is_input_priority_changed = true

	if not is_temporary then
		self._component.default_input_priority = value
	end

	local children = self:get_childrens()
	for i = 1, #children do
		children[i]:set_input_priority(value, is_temporary)
	end

	return self
end






function BaseComponent.reset_input_priority(self)
	self:set_input_priority(self._component.default_input_priority)
	return self
end








function BaseComponent.get_uid(self)
	return self._component._uid
end









function BaseComponent.set_input_enabled(self, state)
	self._meta.input_enabled = state

	for index = 1, #self._meta.children do
		self._meta.children[index]:set_input_enabled(state)
	end

	return self
end






function BaseComponent.get_parent_component(self)
	return self._meta.parent
end











function BaseComponent.setup_component(self, druid_instance, context, style, instance_class)
	self._meta = {
		template = "",
		context = context,
		nodes = nil,
		style = nil,
		druid = druid_instance,
		input_enabled = true,
		children = {},
		parent = type(context) ~= "userdata" and context,
		instance_class = instance_class
	}

	self:set_style(style)
	self:set_template("")

	if self._meta.parent then
		self._meta.parent:__add_children(self)
	end

	return self
end









function BaseComponent.initialize(self, name, input_priority)
	self._component = {
		name = name,
		input_priority = input_priority or const.PRIORITY_INPUT,
		default_input_priority = input_priority or const.PRIORITY_INPUT,
		is_debug = false,
		_is_input_priority_changed = true, 
		_uid = BaseComponent.create_uid()
	}
end








function BaseComponent.log_message(self, message, context)
	if not self._component.is_debug then
		return
	end
	print("[" .. self:get_name() .. "]:", message, helper.table_to_string(context))
end







function BaseComponent.set_debug(self, is_debug)
	self._component.is_debug = is_debug
end






function BaseComponent._is_input_priority_changed(self)
	return self._component._is_input_priority_changed
end






function BaseComponent._reset_input_priority_changed(self)
	self._component._is_input_priority_changed = false
end


function BaseComponent.__tostring(self)
	return self._component.name
end







function BaseComponent.__get_interests(self)
	local instance_class = self._meta.instance_class
	if INTERESTS[instance_class] then
		return INTERESTS[instance_class]
	end

	local interests = {}
	for index = 1, #BaseComponent.ALL_INTERESTS do
		local interest = BaseComponent.ALL_INTERESTS[index]
		if self[interest] and type(self[interest]) == "function" then
			table.insert(interests, interest)
		end
	end

	INTERESTS[instance_class] = interests
	return INTERESTS[instance_class]
end







function BaseComponent.__get_nodes(self)
	local nodes = self._meta.nodes
	local parent = self:get_parent_component()
	if parent then
		nodes = nodes or parent:__get_nodes()
	end
	return nodes
end







function BaseComponent.__add_children(self, children)
	table.insert(self._meta.children, children)
end







function BaseComponent.__remove_children(self, children)
	for i = #self._meta.children, 1, -1 do
		if self._meta.children[i] == children then
			table.remove(self._meta.children, i)
		end
	end
end






function BaseComponent.get_childrens(self)
	local childrens = {}

	for i = 1, #self._meta.children do
		local children = self._meta.children[i]

		table.insert(childrens, children)
		helper.add_array(childrens, children:get_childrens())
	end

	return childrens
end







function BaseComponent.create(name, input_priority)
	
	local new_class = class(name, BaseComponent)

	new_class.initialize = function(self)
		BaseComponent.initialize(self, name, input_priority)
	end

	return new_class
end


return BaseComponent
#@.defold/assets/druid/component.luadruid.constdruid.system.middleclassdruid.helper/druid/const.luac/druid/system/middleclass.luac/druid/helper.luac" 