
úf
Æf




































































local helper = require("druid.helper")
local class = require("druid.system.middleclass")
local settings = require("druid.system.settings")
local base_component = require("druid.component")

local drag = require("druid.base.drag")
local text = require("druid.base.text")
local hover = require("druid.base.hover")
local scroll = require("druid.base.scroll")
local button = require("druid.base.button")
local blocker = require("druid.base.blocker")
local static_grid = require("druid.base.static_grid")
local back_handler = require("druid.base.back_handler")














local DruidInstance = class("druid.druid_instance")

local PATH_OBJ = "."
local MSG_ADD_FOCUS = hash("acquire_input_focus")
local MSG_REMOVE_FOCUS = hash("release_input_focus")
local IS_NO_AUTO_INPUT = sys.get_config_int("druid.no_auto_input", 0) == 1

local function set_input_state(self, is_input_inited)
	if IS_NO_AUTO_INPUT or (self.input_inited == is_input_inited) then
		return
	end

	self.input_inited = is_input_inited
	if is_input_inited then
		msg.post(PATH_OBJ, MSG_ADD_FOCUS)
	else
		msg.post(PATH_OBJ, MSG_REMOVE_FOCUS)
	end
end




local function sort_input_comparator(a, b)
	local a_priority = a:get_input_priority()
	local b_priority = b:get_input_priority()

	if a_priority ~= b_priority then
		return a_priority < b_priority
	end

	return a:get_uid() < b:get_uid()
end


local function sort_input_stack(self)
	local input_components = self.components_interest[base_component.ON_INPUT]
	if not input_components then
		return
	end

	table.sort(input_components, sort_input_comparator)
end



local function create(self, instance_class)
	local instance = instance_class()
	instance:setup_component(self, self._context, self._style, instance_class)

	table.insert(self.components_all, instance)

	local register_to = instance:__get_interests()
	for i = 1, #register_to do
		local interest = register_to[i]
		table.insert(self.components_interest[interest], instance)
	end

	return instance
end



local function check_sort_input_stack(self, components)
	if not components or #components == 0 then
		return
	end

	local is_need_sort_input_stack = false

	for i = #components, 1, -1 do
		local component = components[i]
		if component:_is_input_priority_changed() then
			is_need_sort_input_stack = true
			component:_reset_input_priority_changed()
		end
	end

	if is_need_sort_input_stack then
		sort_input_stack(self)
	end
end



local function can_use_input_component(self, component)
	local can_by_whitelist = true
	local can_by_blacklist = true

	if self._input_whitelist and #self._input_whitelist > 0 then
		can_by_whitelist = not not helper.contains(self._input_whitelist, component)
	end

	if self._input_blacklist and #self._input_blacklist > 0 then
		can_by_blacklist = not helper.contains(self._input_blacklist, component)
	end

	return can_by_blacklist and can_by_whitelist
end


local function process_input(self, action_id, action, components)
	local is_input_consumed = false

	if #components == 0 then
		return false
	end

	for i = #components, 1, -1 do
		local component = components[i]
		local meta = component._meta
		if meta.input_enabled and can_use_input_component(self, component) then
			if not is_input_consumed then
				is_input_consumed = component:on_input(action_id, action)
			else
				if component.on_input_interrupt then
					component:on_input_interrupt()
				end
			end
		end
	end

	return is_input_consumed
end


local function schedule_late_init(self)
	if self._late_init_timer_id then
		return
	end

	self._late_init_timer_id = timer.delay(0, false, function()
		self._late_init_timer_id = nil
		self:late_init()
	end)
end







function DruidInstance.initialize(self, context, style)
	self._context = context
	self._style = style or settings.default_style
	self._deleted = false
	self._is_late_remove_enabled = false
	self._late_remove = {}
	self._is_debug = false
	self.url = msg.url()

	self._input_blacklist = nil
	self._input_whitelist = nil

	self.components_all = {}
	self.components_interest = {}
	for i = 1, #base_component.ALL_INTERESTS do
		self.components_interest[base_component.ALL_INTERESTS[i]] = {}
	end
end






function DruidInstance.new(self, component, ...)
	local instance = create(self, component)

	if instance.init then
		instance:init(...)
	end
	if instance.on_late_init or (not self.input_inited and instance.on_input) then
		schedule_late_init(self)
	end

	return instance
end




function DruidInstance.final(self)
	local components = self.components_all

	for i = #components, 1, -1 do
		if components[i].on_remove then
			components[i]:on_remove()
		end
	end

	self._deleted = true

	set_input_state(self, false)
end







function DruidInstance.remove(self, component)
	if self._is_late_remove_enabled then
		table.insert(self._late_remove, component)
		return
	end

	
	local children = component._meta.children
	for i = #children, 1, -1 do
		self:remove(children[i])
		local parent = children[i]:get_parent_component()
		if parent then
			parent:__remove_children(children[i])
		end
		children[i] = nil
	end

	local all_components = self.components_all
	for i = #all_components, 1, -1 do
		if all_components[i] == component then
			if component.on_remove then
				component:on_remove()
			end
			table.remove(all_components, i)
		end
	end

	local interests = component:__get_interests()
	for i = 1, #interests do
		local interest = interests[i]
		local components = self.components_interest[interest]
		for j = #components, 1, -1 do
			if components[j] == component then
				table.remove(components, j)
			end
		end
	end
end







function DruidInstance.late_init(self)
	local late_init_components = self.components_interest[base_component.ON_LATE_INIT]
	while late_init_components[1] do
		late_init_components[1]:on_late_init()
		table.remove(late_init_components, 1)
	end

	if not self.input_inited and #self.components_interest[base_component.ON_INPUT] > 0 then
		
		set_input_state(self, true)
	end
end







function DruidInstance.update(self, dt)
	self._is_late_remove_enabled = true

	local components = self.components_interest[base_component.ON_UPDATE]
	for i = 1, #components do
		components[i]:update(dt)
	end

	self._is_late_remove_enabled = false
	self:_clear_late_remove()
end









function DruidInstance.on_input(self, action_id, action)
	self._is_late_remove_enabled = true

	local components = self.components_interest[base_component.ON_INPUT]
	check_sort_input_stack(self, components)
	local is_input_consumed = process_input(self, action_id, action, components)

	self._is_late_remove_enabled = false
	self:_clear_late_remove()

	return is_input_consumed
end









function DruidInstance.on_message(self, message_id, message, sender)
	local specific_ui_message = base_component.SPECIFIC_UI_MESSAGES[message_id]

	if specific_ui_message == base_component.ON_MESSAGE_INPUT then
		
		local components = self.components_interest[base_component.ON_MESSAGE_INPUT]
		if components then
			for i = 1, #components do
				local component = components[i]
				if can_use_input_component(self, component) then
					component[specific_ui_message](component, hash(message.node_id), message)
				end
			end
		end
	elseif specific_ui_message then
		
		local components = self.components_interest[specific_ui_message]
		if components then
			for i = 1, #components do
				local component = components[i]
				component[specific_ui_message](component, message, sender)
			end
		end
	else
		
		local components = self.components_interest[base_component.ON_MESSAGE]
		for i = 1, #components do
			components[i]:on_message(message_id, message, sender)
		end
	end
end






function DruidInstance.on_focus_lost(self)
	local components = self.components_interest[base_component.ON_FOCUS_LOST]
	for i = 1, #components do
		components[i]:on_focus_lost()
	end
end






function DruidInstance.on_focus_gained(self)
	local components = self.components_interest[base_component.ON_FOCUS_GAINED]
	for i = 1, #components do
		components[i]:on_focus_gained()
	end
end







function DruidInstance.on_language_change(self)
	local components = self.components_interest[base_component.ON_LANGUAGE_CHANGE]
	for i = 1, #components do
		components[i]:on_language_change()
	end
end









function DruidInstance.set_whitelist(self, whitelist_components)
	if whitelist_components and whitelist_components.isInstanceOf then
		whitelist_components = { whitelist_components }
	end

	for i = 1, #whitelist_components do
		helper.add_array(whitelist_components, whitelist_components[i]:get_childrens())
	end

	self._input_whitelist = whitelist_components

	return self
end









function DruidInstance.set_blacklist(self, blacklist_components)
	if blacklist_components and blacklist_components.isInstanceOf then
		blacklist_components = { blacklist_components }
	end

	for i = 1, #blacklist_components do
		helper.add_array(blacklist_components, blacklist_components[i]:get_childrens())
	end

	self._input_blacklist = blacklist_components

	return self
end







function DruidInstance.set_debug(self, is_debug)
	self._is_debug = is_debug
	return self
end







function DruidInstance.log_message(self, message, context)
	if not self._is_debug then
		return
	end

	print("[Druid]:", message, helper.table_to_string(context))
end





function DruidInstance._clear_late_remove(self)
	if #self._late_remove == 0 then
		return
	end

	for i = 1, #self._late_remove do
		self:remove(self._late_remove[i])
	end
	self._late_remove = {}
end









function DruidInstance.new_button(self, node, callback, params, anim_node)
	return DruidInstance.new(self, button, node, callback, params, anim_node)
end






function DruidInstance.new_blocker(self, node)
	return DruidInstance.new(self, blocker, node)
end







function DruidInstance.new_back_handler(self, callback, params)
	return DruidInstance.new(self, back_handler, callback, params)
end







function DruidInstance.new_hover(self, node, on_hover_callback)
	return DruidInstance.new(self, hover, node, on_hover_callback)
end








function DruidInstance.new_text(self, node, value, no_adjust)
	return DruidInstance.new(self, text, node, value, no_adjust)
end










function DruidInstance.new_grid(self, parent, element, in_row)
	helper.deprecated("The druid:new_grid is deprecated. Please use druid:new_static_grid instead")
	return DruidInstance.new(self, static_grid, parent, element, in_row)
end








function DruidInstance.new_static_grid(self, parent, element, in_row)
	return DruidInstance.new(self, static_grid, parent, element, in_row)
end







function DruidInstance.new_scroll(self, view_node, content_node)
	return DruidInstance.new(self, scroll, view_node, content_node)
end







function DruidInstance.new_drag(self, node, on_drag_callback)
	return DruidInstance.new(self, drag, node, on_drag_callback)
end







function DruidInstance.new_swipe(self, node, on_swipe_callback)
	return helper.require_component_message("swipe")
end






function DruidInstance.new_dynamic_grid(self, parent)
	return helper.require_component_message("dynamic_grid")
end








function DruidInstance.new_lang_text(self, node, locale_id, no_adjust)
	return helper.require_component_message("lang_text")
end








function DruidInstance.new_slider(self, node, end_pos, callback)
	return helper.require_component_message("slider")
end









function DruidInstance.new_checkbox(self, node, callback, click_node, initial_state)
	return helper.require_component_message("checkbox")
end








function DruidInstance.new_input(self, click_node, text_node, keyboard_type)
	return helper.require_component_message("input")
end








function DruidInstance.new_checkbox_group(self, nodes, callback, click_nodes)
	return helper.require_component_message("checkbox_group")
end








function DruidInstance.new_data_list(self, druid_scroll, druid_grid, create_function)
	return helper.require_component_message("data_list")
end








function DruidInstance.new_radio_group(self, nodes, callback, click_nodes)
	return helper.require_component_message("radio_group")
end









function DruidInstance.new_timer(self, node, seconds_from, seconds_to, callback)
	return helper.require_component_message("timer")
end








function DruidInstance.new_progress(self, node, key, init_value)
	return helper.require_component_message("progress")
end







function DruidInstance.new_layout(self, node, mode)
	return helper.require_component_message("layout")
end








function DruidInstance.new_hotkey(self, keys_array, callback, params)
	return helper.require_component_message("hotkey")
end








function DruidInstance.new_rich_text(self, template, nodes)
	return helper.require_component_message("rich_text", "custom")
end


return DruidInstance
/@.defold/assets/druid/system/druid_instance.luadruid.helperdruid.system.middleclassdruid.system.settingsdruid.componentdruid.base.dragdruid.base.textdruid.base.hoverdruid.base.scrolldruid.base.buttondruid.base.blockerdruid.base.static_griddruid.base.back_handler/druid/helper.luac/druid/system/middleclass.luac/druid/system/settings.luac/druid/component.luac/druid/base/drag.luac/druid/base/text.luac/druid/base/hover.luac/druid/base/scroll.luac/druid/base/button.luac/druid/base/blocker.luac/druid/base/static_grid.luac/druid/base/back_handler.luac" 