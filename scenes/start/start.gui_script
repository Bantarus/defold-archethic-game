local druid = require("druid.druid")
local local_storage = require("modules.storage.local_storage")
local monarch = require("monarch.monarch")

local function on_start_click(self,args,button)
	print("Start Button was clicked...")

	if sys.get_sys_info().system_name == "HTML5" then
	
		local response = html5.run([[
		
		sessionStorage.getItem("is_connected")
		
		]])

		print("Is connected : " .. response)
	end
	
	--hide button start
	gui.set_enabled(gui.get_node("button_start"), false)

	-- check if player as local data
	local next = next

	print(local_storage.is_player_profile_empty())
	
	if local_storage.is_player_profile_empty() then


	-- popup form with register template

	monarch.show(hash("popup_start_player_form"), nil, {template = "register"} )
	

else


	-- popup form with login template
	monarch.show(hash("popup_start_player_form"), nil, {template = "login"} )

	

end

	

	

end

function init(self)

	print("Init start scene")

	msg.post(".", "acquire_input_focus")

	-- init druid 

	self.druid = druid.new(self)

	window.set_listener(function(_, event)
		druid.on_window_callback(event)
	end)



	self.button_start = self.druid:new_button("button_start", on_start_click)

	if sys.get_sys_info().system_name == "HTML5" then
		html5.run([[
		
		]])
	end


	monarch.on_focus_changed("start", function(message_id, message, sender)

		print("on_focus_changed")
		
		if message_id == monarch.FOCUS.GAINED then
			print("Focus gained, previous screen: ", message.id)
			if message.id == hash("popup_start_player_form") then

				
				-- show button start 
				gui.set_enabled(gui.get_node("button_start"), true)
			
			end

		elseif message_id == monarch.FOCUS.LOST then
			print("Focus lost, next screen: ", message.id)
		end
	end)


end

function final(self)
	-- Cleanup the Druid instances
	if self.druid then
		self.druid:final()
	end
end

function update(self, dt)
	if self.druid then
		self.druid:update(dt)
	end
end

function on_message(self, message_id, message, sender)
	monarch.on_message(message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	return self.druid and self.druid:on_input(action_id, action)

end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end